package com.example.cleanprotect

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.cleanprotect.ui.theme.CleanProtectTheme
import android.content.Context
import kotlinx.coroutines.delay
import java.io.File

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            CleanProtectTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    AppWithSplashScreen()
                }
            }
        }
    }
}

@Composable
fun AppWithSplashScreen() {
    var showSplash by remember { mutableStateOf(true) }
    val context = LocalContext.current

    LaunchedEffect(Unit) {
        delay(2500)
        showSplash = false
    }

    if (showSplash) {
        SplashScreen()
    } else {
        MainScreen(context)
    }
}

@Composable
fun SplashScreen() {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .padding(32.dp),
        contentAlignment = Alignment.Center
    ) {
        Column(horizontalAlignment = Alignment.CenterHorizontally) {
            Icon(
                imageVector = Icons.Default.Security,
                contentDescription = null,
                tint = MaterialTheme.colorScheme.primary,
                modifier = Modifier.size(80.dp)
            )
            Spacer(modifier = Modifier.height(16.dp))
            Text("Clean & Protect", fontSize = 24.sp, fontWeight = FontWeight.Bold)
            Text("جاري التحميل...", fontSize = 16.sp)
        }
    }
}

@Composable
fun MainScreen(context: Context) {
    var result by remember { mutableStateOf("Welcome to Clean & Protect\nمرحبًا بك في تطبيق التنظيف والحماية") }
    var visible by remember { mutableStateOf(true) }
    val scrollState = rememberScrollState()

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(20.dp)
            .verticalScroll(scrollState),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        AnimatedVisibility(visible = visible, enter = fadeIn(), exit = fadeOut()) {
            Text(
                text = result,
                fontSize = 18.sp,
                color = MaterialTheme.colorScheme.primary,
                modifier = Modifier.padding(16.dp)
            )
        }

        ActionButton("🔧 تنظيف الملفات المؤقتة | Clean Cache") {
            val cleanedSize = cleanCache(context)
            result = "✅ تم تنظيف $cleanedSize كيلوبايت | $cleanedSize KB cleaned"
            visible = false; visible = true
        }

        ActionButton("🚀 تسريع الهاتف | Boost Phone") {
            result = "✅ تم تحرير الذاكرة | Memory optimized"
            visible = false; visible = true
        }

        ActionButton("🛡️ فحص الحماية | Security Check") {
            result = "✅ الهاتف آمن | Your phone is secure"
            visible = false; visible = true
        }

        ActionButton("❄️ تبريد المعالج | CPU Cooler") {
            result = "✅ تم تقليل حرارة المعالج | CPU usage reduced"
            visible = false; visible = true
        }

        ActionButton("🔋 توفير البطارية | Battery Saver") {
            result = "✅ تم تفعيل وضع توفير الطاقة | Power saving enabled"
            visible = false; visible = true
        }

        ActionButton("📱 إدارة التطبيقات | Manage Apps") {
            result = "✅ تحكم بالتطبيقات والأذونات | Manage apps and permissions"
            visible = false; visible = true
        }
    }
}

@Composable
fun ActionButton(text: String, onClick: () -> Unit) {
    Button(
        onClick = onClick,
        colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary),
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        shape = MaterialTheme.shapes.medium
    ) {
        Text(text = text, fontSize = 16.sp, color = Color.White)
    }
}

fun cleanCache(context: Context): Int {
    val cacheDir = context.cacheDir
    val files = cacheDir.listFiles()
    var totalDeleted = 0L

    files?.forEach {
        if (it.delete()) {
            totalDeleted += it.length()
        }
    }

    return (totalDeleted / 1024).toInt() // KB
}
